package Telas;

import classesExec.InformacoesServidor;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.InetAddress;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.UnknownHostException;
import javax.swing.JOptionPane;


public class Cadastra_Host extends classesExec.MudaTema {
    //Atributos da classe
    String ipLocal, ipPublico;

    //Construtor da classe
    public Cadastra_Host() {
        initComponents();
        ipLocal = getIPLocal();
        ipPublico = getIPPublico();
        this.mudaCor();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jTextFieldIpLocalServidor = new javax.swing.JTextField();
        jTextFieldIpPublicoServidor = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jCheckBoxSouHost = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Tela Cadastra Host");
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(255, 204, 102));

        jTextFieldIpLocalServidor.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jTextFieldIpLocalServidor.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextFieldIpLocalServidor.setToolTipText("Digite  seu IP local");

        jTextFieldIpPublicoServidor.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jTextFieldIpPublicoServidor.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextFieldIpPublicoServidor.setToolTipText("Digite seu IP Público");

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel1.setText("IP Público:");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setText("IP Local:");

        jButton2.setBackground(new java.awt.Color(31, 135, 235));
        jButton2.setFont(new java.awt.Font("Segoe UI Black", 1, 12)); // NOI18N
        jButton2.setText("VOLTAR");
        jButton2.setBorderPainted(false);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(31, 135, 235));
        jButton1.setFont(new java.awt.Font("Segoe UI Black", 1, 12)); // NOI18N
        jButton1.setText("CRIAR");
        jButton1.setBorderPainted(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jCheckBoxSouHost.setBackground(new java.awt.Color(255, 204, 102));
        jCheckBoxSouHost.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jCheckBoxSouHost.setText("Preencher automático");
        jCheckBoxSouHost.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxSouHostActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Fotos/LogoLovelace-1.png"))); // NOI18N

        jButton3.setBackground(new java.awt.Color(250, 204, 102));
        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Fotos/LampadaIcon30x30Preto.png"))); // NOI18N
        jButton3.setBorderPainted(false);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jTextFieldIpLocalServidor)
                                .addGap(10, 10, 10))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(37, 37, 37)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                                .addComponent(jButton3)
                                .addContainerGap())
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jTextFieldIpPublicoServidor)
                                .addContainerGap())))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(104, 104, 104)
                .addComponent(jCheckBoxSouHost)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(0, 11, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton3)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextFieldIpPublicoServidor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextFieldIpLocalServidor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBoxSouHost)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    //Classe sobrescrita para mudar cor. Seta as cores em todos os componentes
    @Override
    protected void mudaCor(){
        if(getCor()){
            jPanel1.setBackground(escuro);
            jButton1.setBackground(botao_escuro);
            jButton1.setForeground(text_escuro);
            jButton2.setBackground(botao_escuro);
            jButton2.setForeground(text_escuro);
            jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Fotos/LampadaIcon30x30Branco.png")));
            jButton3.setBackground(escuro);
            jCheckBoxSouHost.setBackground(escuro);
            jLabel1.setForeground(text_claro);
            jLabel2.setForeground(text_claro);
            jCheckBoxSouHost.setForeground(text_claro);
        }
        else{
            jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Fotos/LampadaIcon30x30Preto.png")));
            jButton1.setBackground(botao_claro);
            jButton1.setForeground(text_claro);
            jButton2.setBackground(botao_claro);
            jButton2.setForeground(text_claro);
            jPanel1.setBackground(claro);
            jButton3.setBackground(claro);
            jCheckBoxSouHost.setBackground(claro);
            jLabel1.setForeground(text_escuro);
            jLabel2.setForeground(text_escuro);
            jCheckBoxSouHost.setForeground(text_escuro);
        }
    }
    
    private void jCheckBoxSouHostActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxSouHostActionPerformed
        //Pega o valor do IP público e local e preenche automaticamente os campos
        if (jCheckBoxSouHost.isSelected()) {
            jTextFieldIpPublicoServidor.setText(ipPublico);
            jTextFieldIpLocalServidor.setText(ipLocal);
        //Else habilita os campos para serem preenchidos pelo usuário
        } else {
            jTextFieldIpPublicoServidor.setText("");
            jTextFieldIpLocalServidor.setText("");
            
        }
    }//GEN-LAST:event_jCheckBoxSouHostActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        //Verifica se os IPs estão corretos e conecta o servidor caso estejam
        if (isValidLogin()) {
                InformacoesServidor infoServidor = InformacoesServidor.getInstance();
                infoServidor.setIpPublicoServidor(jTextFieldIpPublicoServidor.getText());
                infoServidor.setIpLocalServidor(jTextFieldIpLocalServidor.getText());
                
                criaServ();
                this.dispose();
                serv.setVisible(true);
        }
    }//GEN-LAST:event_jButton1ActionPerformed
   
    
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        
        this.setVisible(false);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

        //Executa o método mudacor em todas as telas
        setCor();
        if(cadCli != null){
            cadCli.mudaCor();
        }
        if(ini != null){
            ini.mudaCor();
        }
        if(cadHost != null){
            cadHost.mudaCor();
        }
        if(info != null){
            info.mudaCor();
        }
        if(serv != null){
            serv.mudaCor();
        }
        if(cliente != null){
            cliente.mudaCor();
        }
    }//GEN-LAST:event_jButton3ActionPerformed
         
   
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Cadastra_Host.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Cadastra_Host.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Cadastra_Host.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Cadastra_Host.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Cadastra_Host().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JCheckBox jCheckBoxSouHost;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField jTextFieldIpLocalServidor;
    private javax.swing.JTextField jTextFieldIpPublicoServidor;
    // End of variables declaration//GEN-END:variables

 //Pega o IP locar através do iNetAddress
 private String getIPLocal() {
        try {
            InetAddress iNetAddress = InetAddress.getLocalHost();
            return iNetAddress.getHostAddress();
        } catch (UnknownHostException error) {
            JOptionPane.showMessageDialog(null, error.getCause().toString() + " - " + error.getMessage(), "Erro ao recuperar IP Local", JOptionPane.ERROR_MESSAGE);
        }
        return null;
    }
    
    //Pega o IP público atrvés de sites
    private String getIPPublico() {
        String[] urls = { "http://checkip.amazonaws.com/", "https://myexternalip.com/raw", "https://ipecho.net/plain" };
        String ip = null;
        for (int i = 0, l = urls.length; ip == null && i < l; i++) {
            try {
                URL url = new URL(urls[i]);
                BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
                ip = in.readLine();
            } catch (MalformedURLException error) {
                JOptionPane.showMessageDialog(null, error.getCause().toString() + " - " + error.getMessage(), "Erro ao recuperar IP Público", JOptionPane.ERROR_MESSAGE);
            } catch (IOException error) {
                JOptionPane.showMessageDialog(null, error.getCause().toString() + " - " + error.getMessage(), "Erro ao recuperar IP Público", JOptionPane.ERROR_MESSAGE);
            }
        }
        return ip;
    }
    
    //Confere se o IP inserido é um IP válido
    public static boolean validIP (String ip) {
    try {
        if ( ip == null || ip.isEmpty() ) {
            return false;
        }

        String[] parts = ip.split( "\\." );
        if ( parts.length != 4 ) {
            return false;
        }

        for ( String s : parts ) {
            int i = Integer.parseInt( s );
            if ( (i < 0) || (i > 255) ) {
                return false;
            }
        }
        if ( ip.endsWith(".") ) {
            return false;
        }
       
        return true;
    } catch (NumberFormatException nfe) {
        return false;
    }
}
    
     //Faz as verificações necessárias para ver se os IPs inseridos são validos
     private boolean isValidLogin() {
        StringBuilder builder = new StringBuilder();
        if (jTextFieldIpPublicoServidor.getText() == null || jTextFieldIpPublicoServidor.getText().trim().isEmpty())
            builder.append("IP público do servidor não pode ser vazio.\n");
        if (jTextFieldIpLocalServidor.getText() == null || jTextFieldIpLocalServidor.getText().trim().isEmpty())
            builder.append("IP local do servidor não pode ser vazio.\n");
        if (validIP(jTextFieldIpPublicoServidor.getText()) == false)
            builder.append("IP público do servidor inválido.\n");
        if (validIP(jTextFieldIpLocalServidor.getText()) == false)
            builder.append("IP local do servidor inválido.\n");
 
        
        if (!builder.toString().isEmpty())
            JOptionPane.showMessageDialog(null, builder.toString(), "Existem erros de validação.", JOptionPane.ERROR_MESSAGE);
        
        return builder.toString().isEmpty();
    }
}




